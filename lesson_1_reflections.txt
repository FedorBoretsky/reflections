How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Если в новой версии программы появилась ошибка, я в первую очередь буду 
    искать ее в новых строчках программы и в тех, которые изменились. 
    Чем длиннее программа, тем больше я выиграю времени, изучая не весь текст,
    а только изменившиеся фрагменты. В Linux я сравню старый и новый текст 
    программы с помощью команды «diff» и внимательно изучу строки помеченные 
    знаком "+".

How could having easy access to the entire history of a file make you a better
programmer in the long term?

    Я могу изучать эволюцию собственного кода и принятых мною решений. 
    Это поможет мне понять в каких ситуациях я совершаю ошибки и попытаться 
    изменить это поведение. Кроме того полная история файла позволяет увидеть 
    не только конечный результат, но и затраченные усилия. 
    Иногда это вдохновляет. Иногда помогает оценить собственную эффективность. 
    Иногда позволяет оценить качество рефакторинга.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
    
    Достоинства выбора момента сохранния версии самим пользователем:

        Можно дать версии осмысленный комментарий. Комментарий обобщает
        изменения сделанные ради одной цели, но раскиданные в разных 
        местах файла. 
    
        Легче найти версию которую сам создавал, 
    
        Легче понять отличие чужой версии в целом от других если ее 
        сопровождает осмысленный обобщающий комментарий. 
    
        Легче вернуться к нужному моменту т.к. возврат обычно происходит 
        к некоторому состоянию конечного продукта, а не к состоянию 
        редактируемого кода.

        Сопровождение версии осмысленным комментарием помогает думать 
        в терминах конечного продукта, а не отдельных строчек кода.

        В репозитории хранятся в основном версии с завершенными 
        исправлениями. 

    Недостатки выбора момента сохранения самим пользователем:

        Нужно задумываться над моментом сохранения и комментарием к версии.

        При внезапном сбое может пропасть много сделанного для последней версии 
        (фактически пропадает все).

        Чужой комментарий может быть запутанным.

        Если на время прерываешь работу версия для коллег не сохраняется.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git используется для работы программой (проектом). Программа часто состоит
    из многих исходных файлов, поэтому сохранение версии программы/проекта
    подразумевает сохранение всех файлов участвущих в проекте. 

    Google Docs позиционирует себя как инструмент для работы с документом, 
    поэтому сохраняет версии только для файла одного документа. Возможно 
    в офисной работе тоже пригодились бы сохранение внутри версии нескольких 
    файлов, но не факт что это станет плюсом во всех ситуациях. 

How can you use the commands git log and git diff to view the history of files?
    
    Команда git log позволяет понять какие были шаги в развитии проекта. 
    Каждую версию я интерпритирую как шаг, а смысл этого шага узнаю из 
    комментария к commit. 

    Команда git diff дает мне возможность увидеть конкретные изменения 
    в тексте файлов, которые сделали возможным тот или иной "шаг" программы.

How might using version control make you more confident to make changes that
could break something?
    
    Так как я могу вернуться к любой предыдущей версии, то я могу спокойно 
    вносить любые изменения, даже если они что-то испортят.

Now that you have your workspace set up, what do you want to try using Git for?

    Во-первых, в другом курсе (про функциональное программирование)
    все примеры предлагаеются как репозиторий Git. Я скачаю их с GitHub,
    а потом буду безбоязненно менять.

    Было бы неплохо попробовать на какой-то своей реальной программе.
    Первую же свою программу буду делать уже с использованием Git.

    